// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Role-based access control
  role          UserRole  @default(CLIENT)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?

  // Profile information
  phone         String?
  company       String?
  position      String?
  bio           String?
  website       String?
  location      String?

  // Social login
  accounts      Account[]
  sessions      Session[]

  // Relationships
  projects      Project[]
  clients       Client[]
  teamMembers   TeamMember[]
  invoices      Invoice[]
  payments      Payment[]
  notifications Notification[]
  activities    Activity[]
  messages      Message[]
  tasks         Task[]
  comments      Comment[]
  files         File[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Client Management
model Client {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  company     String?
  website     String?
  industry    String?
  size        String?
  status      ClientStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Address information
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?

  // Billing information
  billingEmail String?
  taxId        String?
  paymentTerms String?

  // Relationships
  projects    Project[]
  invoices    Invoice[]
  payments    Payment[]
  contacts    Contact[]
  activities  Activity[]
  notes       Note[]

  @@map("clients")
}

model Contact {
  id        String   @id @default(cuid())
  clientId  String
  name      String
  email     String
  phone     String?
  position  String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

// Project Management
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Project details
  type        ProjectType
  industry    String?
  technologies String[]
  features    String[]
  requirements String?

  // Relationships
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  teamMembers TeamMember[]
  tasks       Task[]
  milestones  Milestone[]
  files       File[]
  comments    Comment[]
  activities  Activity[]
  invoices    Invoice[]
  payments    Payment[]
  notes       Note[]

  @@map("projects")
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      TeamRole @default(DEVELOPER)
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("team_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  estimatedHours Float?
  actualHours   Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Task details
  type        TaskType
  tags        String[]
  attachments String[]

  // Relationships
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId  String?
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  
  comments    Comment[]
  activities  Activity[]
  subtasks    Subtask[]

  @@map("tasks")
}

model Subtask {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  taskId      String
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model Milestone {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

// File Management
model File {
  id          String   @id @default(cuid())
  name        String
  originalName String
  path        String
  size        Int
  type        String
  mimeType    String
  uploadedAt  DateTime @default(now())

  // File metadata
  description String?
  tags        String[]
  isPublic    Boolean  @default(false)

  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("files")
}

// Communication
model Message {
  id        String   @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Activity Tracking
model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())

  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  clientId    String?
  client      Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  taskId      String?
  task        Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// Billing & Payments
model Invoice {
  id          String        @id @default(cuid())
  number      String        @unique
  amount      Float
  tax         Float         @default(0)
  total       Float
  status      InvoiceStatus @default(DRAFT)
  dueDate     DateTime
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Invoice details
  description String?
  notes       String?
  terms       String?
  currency    String        @default("USD")

  // Relationships
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  payments    Payment[]
  items       InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Float
  unitPrice   Float
  total       Float
  createdAt   DateTime @default(now())

  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  processedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Payment details
  description   String?
  metadata      Json?

  // Relationships
  invoiceId     String?
  invoice       Invoice?      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  projectId     String?
  project       Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Notes
model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("notes")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  AGENCY_ADMIN
  CLIENT_ADMIN
  TEAM_MEMBER
  GUEST
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  CHURNED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ProjectType {
  WEBSITE
  ECOMMERCE
  WEB_APP
  MOBILE_APP
  CUSTOM_SOLUTION
  MAINTENANCE
  CONSULTING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TeamRole {
  PROJECT_MANAGER
  DEVELOPER
  DESIGNER
  QA_TESTER
  CONTENT_WRITER
  SEO_SPECIALIST
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskType {
  DEVELOPMENT
  DESIGN
  TESTING
  CONTENT
  SEO
  MAINTENANCE
  BUG_FIX
  FEATURE
}

enum MessageType {
  TEXT
  FILE
  SYSTEM
}

enum ActivityType {
  PROJECT_CREATED
  PROJECT_UPDATED
  TASK_CREATED
  TASK_COMPLETED
  MILESTONE_REACHED
  PAYMENT_RECEIVED
  INVOICE_SENT
  CLIENT_ADDED
  FILE_UPLOADED
  COMMENT_ADDED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  CHECK
  CASH
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  REMINDER
}
